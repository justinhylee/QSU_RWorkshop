---
title: "Session 3: Advanced R"
editor_options: 
  chunk_output_type: console
---
title: "Session 2: Basic R"
author: "Justin Lee"
date: "`r Sys.Date()`"
# date: "2023-01-29"
format:
  html:
    self-contained: true
    page-layout: full
    toc: true
editor: source
execute: 
  freeze: true
editor_options: 
  chunk_output_type: console
---

# Session 3: Advanced R
-   for loops, if clauses, writing your own functions
-   parallel computing -- locally and intro to Sherlock
-   Shiny dashboards

## Set up libraries:
```{r}
library(dplyr)

```


## For loops:
-   when you want to iterate a chunk of code over multiple XX
```{r}

## going back to our baseball reference scraping code:
### jl/Wei checked we are okay to scrape data from baseball reference <20 times per minute and not using it for public websites: https://www.sports-reference.com/bot-traffic.html

## in Session 2 we only scraped Mookie Betts gamelogs...now we want to get more than one player
## first i'll create a vector of all the urls i want to scrape from:
id_url = c("https://www.baseball-reference.com/players/gl.fcgi?id=bettsmo01&t=b&year=2023#batting_gamelogs",
           "https://www.baseball-reference.com/players/gl.fcgi?id=ohtansh01&t=b&year=2023",
           "https://www.baseball-reference.com/players/gl.fcgi?id=freemfr01&t=b&year=2023"
           )

## i'll define an empty dataframe that each of the above gamelogs will be added into:
df_gamelog = data.frame()

## now create a for loop to rerun the below chunk of code for each id_url:
for(j in id_url){
## scraping data from baseball reference:
require(rvest)
url = j %>%
  read_html()

gamelog = url %>%
  html_elements("table") %>%
  html_table(header = TRUE)

gamelog = as.data.frame(gamelog[5]) %>%
  ## drop the rows that are table headers and the last row of totals:
  ## Rk seems like the game number, the headers are character string months (May, Jun, etc)
  ## quick and dirty way to do this is make a numeric variable of Rk...that will set any non-numeric values to NA and then drop NA rows
  mutate(gamenum=as.numeric(Rk),
         ## add a player name since we are now pulling from multiple players:
         player = gsub(".*id=|01&t.*", "", j)) %>%
  filter(!is.na(gamenum)) %>%
  ## move player and gamenum var to first column then everything else:
  # dplyr::select(player, gamenum, everything())
  ## another way to select columns --  i want to drop Rk variable and reorder to player, gamenum, everything else
  dplyr::select(player, gamenum, Gcar:Pos)


df_gamelog = plyr::rbind.fill(df_gamelog, gamelog)
}

## save this data for later
# saveRDS(df_gamelog, "/Users/jlee/Library/CloudStorage/Box-Box/jlee/QSU_R/data/baseball_gamelogs2023.rds")

## DEBUG
## how do i get player name from the id_url vector?
# gsub(".*id=|01&t.*", "", id_url[1])

```

## If clauses:
-   when you want to apply chunk of code to only some XX
```{r}

test = df_gamelog %>%
  ## make some vars numeric:
  mutate_at(c("H", "X2B", "X3B", "HR"), as.numeric) %>%
  ## keep just some vars for cleaner example:
  dplyr::select(player, gamenum, H, X2B, X3B, HR)

calctotbases = FALSE
if(calctotbases){
  test$totalbases = test$H + test$X2B*2 + test$X3B*3 + test$HR*4
  head(test)
}

head(test)


calctotbases = TRUE
if(calctotbases){
  test$totalbases = test$H + test$X2B*2 + test$X3B*3 + test$HR*4
  head(test)
}


```

## Writing your own functions:
-   write a function to create the plot from session2_basicR.qmd choosing the "player" and stat
```{r}
library(ggplot2)
library(directlabels)

## pivot to long data using tidyr::pivot_longer()
df_gamelog_long <- df_gamelog %>%
  # only keep some vars:
  dplyr::select(player, gamenum, PA:OPS) %>%
  ## pivot to long data
  tidyr::pivot_longer(!c(player, gamenum), names_to = "stat", values_to = "value") %>%
  ## make value var numeric:
  mutate(value=as.numeric(value))



## write the function for the lineplot we made before:
plot.stat <- function(data, player_var, stat_var){
  ## for testing:
  # data=df_gamelog_long
  # player_var="bettsmo"
  # stat_var="H"
  
  require(ggplot2)
  require(dplyr)
  require(directlabels)
  
  ## filter the data by player and stat vars:
  plot = data %>%
    filter(player %in% c(player_var) & stat %in% c(stat_var))
  
  ggplot(data=plot, aes(x=gamenum, y=value, color=stat, shape=player)) +
    geom_point() +
    geom_line(aes(group=interaction(stat,player))) +
    theme_bw() + theme(legend.position = "top") +
    scale_y_continuous(limits = c(0, max(plot$value, na.rm = TRUE))) +
    labs(x="Game Number", y="Value", color="Stat", shape="Player") +
    ## directlabels package:
    directlabels::geom_dl(aes(label=stat), method = list(directlabels::dl.trans(x=x+0.5), "last.points"), cex = 0.8)
  
}

## now call the function with my parameters of choice:
plot.stat(data=df_gamelog_long, player_var = c("bettsmo"), stat_var = c("BA", "OBP"))

plot.stat(data=df_gamelog_long, player_var = c("bettsmo", "ohtansh"), stat_var = c("BA", "OBP"))
```

## Parallel Computing:
-   examples of when i parallelize:
    -   i need to run many iterations of a similar model (ie GWAS running many models for each SNP)
    -   i have a huge dataframe that i need to create new vars for but it takes forever
    -   i need to run an Rscript that is very resource heavy that my laptop can't handle

-   each "job" needs to be self-contained...ie if i create a variable in one core, other cores will not know about it

-   jl mostly uses doParallel (https://cran.r-project.org/web/packages/doParallel/doParallel.pdf), but planning to check out "furrr" (https://furrr.futureverse.org/) when i have some time
```{r}
##run this in parallel
library(doParallel)
#how many cores available
detectCores()
cl <- makeCluster(4, type = "FORK") #creates cluster
registerDoParallel(cl) #registers cluster cl as a cluster
getDoParWorkers() #checks how many cores in use
print(cl)

### jl left off here, figure out something to parallelize
## wrap with system.time so you can see how long it took to run
system.time(
  ## foreach actually comes from the foreach package but its a dependency for doParallel:
  df_gamelog_dopar <- foreach(k = c(id_url), .packages = c("rvest"), .combine = rbind) %dopar% {
    url = j %>%
      read_html()
    
    gamelog = url %>%
      html_elements("table") %>%
      html_table(header = TRUE)
    
    gamelog = as.data.frame(gamelog[5]) %>%
      ## drop the rows that are table headers and the last row of totals:
      ## Rk seems like the game number, the headers are character string months (May, Jun, etc)
      ## quick and dirty way to do this is make a numeric variable of Rk...that will set any non-numeric values to NA and then drop NA rows
      mutate(gamenum=as.numeric(Rk),
             ## add a player name since we are now pulling from multiple players:
             player = gsub(".*id=|01&t.*", "", j)) %>%
      filter(!is.na(gamenum)) %>%
      ## move player and gamenum var to first column then everything else:
      # dplyr::select(player, gamenum, everything())
      ## another way to select columns --  i want to drop Rk variable and reorder to player, gamenum, everything else
      dplyr::select(player, gamenum, Gcar:Pos)
    

  } ## closes %dopar%
) ## closes system.time()

```

## Sherlock:
-   Stanford's computer cluster (https://www.sherlock.stanford.edu/docs/getting-started/#prerequisites)
-   To get an account you'll need Manisha to email srcc-support@stanford.edu with your SUNet ID
-   QSU has its own partitions -p qsu
    -   depending on the requirements (memory, time, number of cores, etc) we can also use owners and normal partitions
-   NO PHI!
```{r}
## log in to Sherlock
## reminder in RStudio can submit code to Terminal with CMD + option + return
ssh jhylee@login.sherlock.stanford.edu

## check what's in your directory
ls -l

## create a directory -- note by default access is restricted to read, write, execute for owner and only read, execute for group and others
mkdir test_dir
## if you need it to be full access to all: -m777
mkdir -m777 test_dir2 
## delete directory -- BE CAREFUL
rm -r test_dir test_dir2

## 
mkdir -m777 QSU_RWorkshop 

## navigate to another directory
cd test_dir2

## sync your local folder into Sherlock directory:
## i think Sherlock doesn't know how to connect to Box Sync...or more likely jl doesn't know how to make it connect to Box Sync
rsync -a -v --stats '/Users/jlee/Library/CloudStorage/Box-Box/jlee/QSU_R/code/' jhylee@login.sherlock.stanford.edu:/test_dir2

## need to move file out of Box to rsync or scp...but easier way: use FETCH


## look at below RScript and sbatch files
## submit sbatch file with array=1-10
cd /home/users/jhylee/QSU_RWorkshop
sbatch -p qsu,owners,normal --array=1-3 test_arraynum.sbatch

## remove .out and .err files
rm *.out *.err
```

### Rscript
```{r}
## jl make up some simple Rscript that we can submit to Sherlock with XX iterations
## below is added to test_arraynum.R file

args = commandArgs(TRUE)

print(paste0("This is test array number: ", args))

write.table(text_test, paste0("arraytest", args, ".txt"), col.names = FALSE, row.names = FALSE)
```

### sbatch file
```{r}
## sbatch file that will get submittted to Sherlock to run above Rscript

#!/bin/bash
#SBATCH -J test_%a
#SBATCH -o test_%a.out
#SBATCH -e test_%a.err
#SBATCH -p qsu,owners,normal
#SBATCH --mail-type=ALL
#SBATCH --mail-user=jhylee@stanford.edu
#SBATCH --mem=10G
#SBATCH --time=01:00:00

module load R

R --vanilla < test_arraynum.R --args ${SLURM_ARRAY_TASK_ID}

```


## Shiny:
-   https://shiny.posit.co/
-   Shiny apps/dashboards allow the user to have interactive tables/figures/etc 
-   At QSU: i use it mostly for clinical trials to track enrollment, demographics, etc

-   it can all be written in one .R file, but the more complicated it gets usually we'd split them into 2-3ish files:
    -   app.R -- this runs the app
    -   server.R -- this consists of all the functions to create what you want to display in the Shiny app
    -   ui.R -- this creates the outline of what the Shiny app looks like
    
-   you can run the app locally on your own computer or server or have it hosted somewhere like shinyapps.io (QSU has an account)
    -   for Free plan: you can have up to 5 apps
    -   QSU has Standard plan: unlimited number of apps, some limit on active hours, can restrict access by email login 

```{r}
## let's make a basic Shiny app

## packages we need:
library(shiny)
library(shinythemes) ## this gives you easy themes to customize your dashboards (https://rstudio.github.io/shinythemes/)
library(gtsummary)
library(gt)
library(ggplot2)
library(plotly) ## this is a cool package that easily adds some interactive features to ggplots like hover over, zoom, print, etc

## get some data:
shinydat <- readRDS("/Users/jlee/Library/CloudStorage/Box-Box/jlee/QSU_R/data/baseball_gamelogs2023.rds")

## jl is not creative and doing this last minute so make same long data as before:
## pivot to long data using tidyr::pivot_longer()
shinydat_long <- shinydat %>%
  # only keep some vars:
  dplyr::select(player, gamenum, PA:OPS) %>%
  ## pivot to long data
  tidyr::pivot_longer(!c(player, gamenum), names_to = "stat", values_to = "value") %>%
  ## make value var numeric:
  mutate(value=as.numeric(value))


## this will go into the server.R file:
server <- function(input, output, session){
  ## create some table:
  output$tab1 <- render_gt({

      ## filter shinydat:
      if(is.null(input$tab_player)){
        tab1.filter <- shinydat 
      } else {
        tab1.filter <- shinydat %>%
          dplyr::filter(player %in% input$tab_player)
      }
      
    ## create table
    tab1.out <-
      tab1.filter %>%
      dplyr::select(player, Inngs, PA, AB, R, H, HR, RBI, BA, OBP) %>%
      mutate(player=case_when(player %in% "bettsmo" ~ "Mookie Betts",
                              player %in% "freemfr" ~ "Freddie Freeman",
                              player %in% "ohtansh" ~ "Shohei Ohtani"),
             ## make all these vars numeric:
             PA=as.numeric(PA),
             AB=as.numeric(AB),
             R=as.numeric(R),
             H=as.numeric(H),
             HR=as.numeric(HR),
             RBI=as.numeric(RBI),
             BA=as.numeric(BA),
             OBP=as.numeric(OBP)) %>%
      tbl_summary(by=player,
                  type=list(c(PA, AB, R, H, HR, RBI, BA, OBP) ~ "continuous"),
                  missing_text = "Missing"
                  ) %>%
      add_stat_label()
    
    
    ## output table
    ### try using gtsummary -- 
    reset_gtsummary_theme()
    # theme_gtsummary_journal(journal = "jama")
    theme_gtsummary_compact()
    
    tab1.out %>%
      as_gt() %>%
      tab_header(md("**Table XX: **"))
    

  })

  ## create some plot:
  output$plot1 <- renderPlotly({
  ## for testing:
  # data=df_gamelog_long
  # player_var="bettsmo"
  # stat_var="H"
  
  require(ggplot2)
  require(dplyr)
  require(directlabels)
  
  ## filter the data by player and stat vars:
  plot = shinydat_long %>%
    filter(player %in% c(input$plot_player) & stat %in% c(input$plot_stat))
  
  ggplot(data=plot, aes(x=gamenum, y=value, color=stat, shape=player)) +
    geom_point() +
    geom_line(aes(group=interaction(stat,player))) +
    theme_bw() + theme(legend.position = "top") +
    scale_y_continuous(limits = c(0, max(plot$value, na.rm = TRUE))) +
    labs(x="Game Number", y="Value", color="Stat", shape="Player") +
    ## directlabels package:
    directlabels::geom_dl(aes(label=stat), method = list(directlabels::dl.trans(x=x+0.5), "last.points"), cex = 0.8)
  
  }) ## closes renderPlotly
    
  
} ## closes server


## this will go into the ui.R file:
ui <- navbarPage(title = "shiny baseball test",
                 id = "navbar",
                 
                 theme = shinytheme("spacelab"),
                 
                 wellPanel( HTML(paste(
                   "This Shiny app is a test. It was last updated on:", Sys.Date()
                   )
                   ) ## closes HTML
                   ), ## closes wellPanel
                 
                 tabPanel("table",
                          wellPanel(checkboxGroupInput("tab_player", label = "Select players to display in the table:",
                                                       choiceValues =  c("bettsmo", "freemfr", "ohtansh"),
                                                       choiceNames = c("Mookie Betts", "Freddie Freeman", "Shohei Ohtani")
                                                       ) 
                                    ), ## closes wellPanel
                          fixedRow(width=6,
                                   gt_output("tab1")
                                   )

                          ), ## closes tabPanel "table"
                 
                 tabPanel("figure",
                          wellPanel(checkboxGroupInput("plot_player", label = "Select players to display in the plot:",
                                                       choiceValues =  c("bettsmo", "freemfr", "ohtansh"),
                                                       choiceNames = c("Mookie Betts", "Freddie Freeman", "Shohei Ohtani")
                                                       ),
                                    checkboxGroupInput("plot_stat", label = "Select stats to display in the plot:",
                                                       choiceValues = c("BA", "OBP"),
                                                       choiceNames = c("Batting Average", "On Base Percentage")
                                                       ),
                                    ), ## closes wellPanel
                          fluidRow(plotlyOutput("plot1"))
                   
                 ) ## closes tabPanel "figure
                 
                 ) ## closes navbarPage


## this will go into the app.R file:
shinyApp(ui, server)
```


## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.
